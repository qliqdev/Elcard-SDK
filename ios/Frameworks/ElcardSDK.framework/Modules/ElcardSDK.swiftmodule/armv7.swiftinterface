// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ElcardSDK
import Darwin
@_exported import ElcardSDK
import Foundation
import ObjectiveC
import Security
import Swift
import UIKit
import _Concurrency
@objc public protocol MaskedTextFieldDelegateListener : UIKit.UITextFieldDelegate {
  @objc optional func textField(_ textField: UIKit.UITextField, didFillMandatoryCharacters complete: Swift.Bool, didExtractValue value: Swift.String)
}
@available(iOS, introduced: 8, deprecated: 11, message: "Use UITextInput extension instead")
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var cursorPosition: Swift.Int {
    get
    set(newPosition)
  }
}
public protocol BindCardDelegate {
  func ecOnBindSuccess(_ cardData: Swift.String)
  func ecOnBindCancelled()
  func ecOnBindFailed(_ error: Swift.Error?)
}
@available(iOS, introduced: 8, deprecated: 11, message: "Use UITextInput extension instead")
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public var cursorPosition: Swift.Int {
    get
    set(newPosition)
  }
}
public struct CaretString : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.Equatable {
  public let string: Swift.String
  public let caretPosition: Swift.String.Index
  public init(string: Swift.String, caretPosition: Swift.String.Index)
  public init(string: Swift.String)
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
public func == (left: ElcardSDK.CaretString, right: ElcardSDK.CaretString) -> Swift.Bool
public struct ThemeParameters {
  public var backgroundColor: UIKit.UIColor
  public var foregroundColor: UIKit.UIColor
  public var accentColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var inputViewBackgroundColor: UIKit.UIColor
  public init(bgColor: UIKit.UIColor, fgColor: UIKit.UIColor, acColor: UIKit.UIColor, textColor: UIKit.UIColor, borderColor: UIKit.UIColor, inputViewBgColor: UIKit.UIColor)
  public static func defalut() -> ElcardSDK.ThemeParameters
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: ElcardSDK.SHA3.Variant, b: ElcardSDK.SHA3.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(variant: ElcardSDK.SHA3.Variant)
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension ElcardSDK.SHA3 {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
@available(iOS 11, *)
extension UIKit.UITextInput {
  @_Concurrency.MainActor(unsafe) public var allText: Swift.String {
    get
    set(newText)
  }
  @_Concurrency.MainActor(unsafe) public var caretPosition: Swift.Int {
    get
    set(newPosition)
  }
  @_Concurrency.MainActor(unsafe) public var allTextRange: UIKit.UITextRange? {
    get
  }
}
public struct Notation {
  public init(character: Swift.Character, characterSet: Foundation.CharacterSet, isOptional: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class ElcardCore {
  public static func bindCard(parent: UIKit.UIViewController, delegate: ElcardSDK.BindCardDelegate, theme: ElcardSDK.ThemeParameters = .defalut(), language: ElcardSDK.Language = .ru)
  @objc deinit
}
public enum Language : Swift.CustomStringConvertible {
  case ru
  case ky
  public var description: Swift.String {
    get
  }
  public static func == (a: ElcardSDK.Language, b: ElcardSDK.Language) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol MaskedTextViewDelegateListener : UIKit.UITextViewDelegate {
  @objc optional func textView(_ textView: UIKit.UITextView, didFillMandatoryCharacters complete: Swift.Bool, didExtractValue value: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MaskedTextViewDelegate : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) weak open var listener: ElcardSDK.MaskedTextViewDelegateListener?
  @_Concurrency.MainActor(unsafe) open var onMaskedTextChangedCallback: ((_ textField: UIKit.UITextView, _ value: Swift.String, _ complete: Swift.Bool) -> ())?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var primaryMaskFormat: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var autocomplete: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var autocompleteOnFocus: Swift.Bool
  @objc override convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var acceptableTextLength: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) open var totalTextLength: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) open var acceptableValueLength: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) open var totalValueLength: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0, message: "Use textView:shouldInteractWithURL:inRange:forInteractionType: instead")
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0, message: "Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead")
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func isDeletion(inRange range: Foundation.NSRange, string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func replaceCharacters(inText text: Swift.String, range: Foundation.NSRange, withCharacters newText: Swift.String) -> Swift.String
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var delegate: ObjectiveC.NSObject? {
    @objc get
    @objc set(newDelegate)
  }
  @objc deinit
}
extension ElcardSDK.SHA3.Variant : Swift.Equatable {}
extension ElcardSDK.SHA3.Variant : Swift.Hashable {}
extension ElcardSDK.Language : Swift.Equatable {}
extension ElcardSDK.Language : Swift.Hashable {}
